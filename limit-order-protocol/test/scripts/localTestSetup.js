const { ether } = require('../helpers/utils');
const { deploySwapTokens } = require('../helpers/fixtures');
const { ethers } = require('hardhat');
const fs = require('fs');
const path = require('path');

async function main() {
  const [maker, taker] = await ethers.getSigners();

  const { dai, weth, swap } = await deploySwapTokens();

  await dai.mint(maker, ether('100'));
  await dai.mint(taker, ether('100'));
  await weth.deposit({ value: ether('1') });
  await weth.connect(taker).deposit({ value: ether('1') });

  await dai.approve(swap, ether('100'));
  await dai.connect(taker).approve(swap, ether('100'));
  await weth.approve(swap, ether('1'));
  await weth.connect(taker).approve(swap, ether('1'));

  const DutchAuctionCalculator = await ethers.getContractFactory('DutchAuctionCalculator');
  const dutchAuctionCalculator = await DutchAuctionCalculator.deploy();
  await dutchAuctionCalculator.waitForDeployment();

  const TWAPCalculator = await ethers.getContractFactory('TWAPCalculator');
  const twap = await TWAPCalculator.deploy();
  await twap.waitForDeployment();

  const MultiPhase = await ethers.getContractFactory('MultiPhaseAmountCalculator');
  const multiPhase = await MultiPhase.deploy();
  await multiPhase.waitForDeployment();


    const AggregatorMock = await ethers.getContractFactory('AggregatorMock');
    const daiOracle = await AggregatorMock.deploy(ether('0.00025'));
    await daiOracle.waitForDeployment();

  const addresses = {
    SWAP: await swap.getAddress(),
    DAI: await dai.getAddress(),
    WETH: await weth.getAddress(),
    DUTCH_CALCULATOR: await dutchAuctionCalculator.getAddress(),
    TWAP_CALCULATOR: await twap.getAddress(),
    MULTIPHASE_CALCULATOR: await multiPhase.getAddress(),
    DAI_ORACLE: await daiOracle.getAddress(),
  };

  const output = `// Auto-generated by deployLocalAndLogAddresses.ts

export const CONTRACT_ADDRESSES = {
  SWAP: '${addresses.SWAP}',
  DAI: '${addresses.DAI}',
  WETH: '${addresses.WETH}',
  DUTCH_CALCULATOR: '${addresses.DUTCH_CALCULATOR}',
  TWAP_CALCULATOR: '${addresses.TWAP_CALCULATOR}',
  MULTIPHASE_CALCULATOR: '${addresses.MULTIPHASE_CALCULATOR}',
  DAI_ORACLE: '${addresses.DAI_ORACLE}',
} as const;
`;

  const outPath = path.resolve(__dirname, '../config/addresses.ts');
  fs.writeFileSync(outPath, output);

  console.log(`âœ… Contract addresses written to ${outPath}`);
  console.table(addresses);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
